/**
 * ExportCatalog.ds
 *
 * The script exports catalog data to the Import/Export folder (impex) 
 */

importPackage( dw.catalog );
importPackage( dw.content );
importPackage( dw.io );
importPackage( dw.net );
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.value );
importPackage( dw.object );

/**
 * Main function of the script.
 */
function execute( args : PipelineDictionary ) : Number
{			  	
	var objects : SeekableIterator = CustomObjectMgr.getAllCustomObjects('TurnTo');
   	try {
	   	if (objects) {
		   	var obj : CustomObject = objects.next();   	   	
		   	var turntoUrl : String = obj.getCustom().url;
		   	var siteKey : String = obj.getCustom().siteKey;
		   	var authKey : String = obj.getCustom().authKey;
		   	var timeoutMs : Integer = obj.getCustom().jobTimeout;		   	
		   	if (timeoutMs == null) {
		   		timeoutMs = 500000;
		   	}	   	
	   	
			// A set to hold categories
			var foundCategories : Set = new HashSet();
			
			// Get the file path where the output will be stored
			var impexPath : String = File.getRootDirectory(File.IMPEX).getFullPath();
			// Create a TurnTo directory if one doesn't already exist
			var turntoDir : File = new File(impexPath + "/TurnTo");
			if (!turntoDir.exists()) {
				turntoDir.mkdir();
			}	
			
		    // Initialize a file writer for output
		    var catalogExport : File = new File(turntoDir.getFullPath() + "/exportCatalog.txt");
		    var fileWriter : FileWriter = new FileWriter(catalogExport);
		    try {
		    	// Write the file header	
		    	fileWriter.writeLine("SKU\tIMAGEURL\tTITLE\tPRICE\tCURRENCY\tACTIVE\tITEMURL\tCATEGORY\tKEYWORDS\tREPLACEMENTSKU\tINSTOCK\tVIRTUALPARENTCODE\tCATEGORYPATHJSON\tISCATEGORY\tMEMBERS");	    	
				var products : SeekableIterator =  ProductMgr.queryAllSiteProducts();		
				try {
					while (products.hasNext()) {			 
						var product : Product = products.next();
						
						if (product.isVariant()) {
							continue;
						}
						
						// SKU
						fileWriter.write(replaceNull(product.getID(), ""));
						fileWriter.write("\t");
						
						// IMAGEURL			
						var image : MediaFile = product.getImage("large");
						if (image == null){
							image = product.getImage("medium");
						}
						if (image == null){
							image = product.getImage("small");
						}
						if (image == null){
							image = product.getImage("swatch");	
						}
						
						if (image != null) {
							fileWriter.write(image.getAbsURL().toString());
						}		
						fileWriter.write("\t");
						
						// TITLE
						fileWriter.write(replaceNull(product.getName(), ""));			
						fileWriter.write("\t");
						
						// PRICE
						var price : Money = product.getPriceModel().getPrice();
						var priceStr : String = price.getValue().toString();
						if (!priceStr.equalsIgnoreCase("N/A")) {
							fileWriter.write(priceStr);
						}
						fileWriter.write("\t");
						
						// CURRENCY
						fileWriter.write(price.getCurrencyCode());
						fileWriter.write("\t");
						
						// ACTIVE
						fileWriter.write("Y");
						fileWriter.write("\t");
						
						// ITEMURL
						fileWriter.write(dw.web.URLUtils.http('Product-Show', 'pid', product.getID()).toString());			
						fileWriter.write("\t");
						
						// CATEGORY											
						if (product.getPrimaryCategory() != null){
							fileWriter.write(product.getPrimaryCategory().getID());
							// Add the category to the category set			
							foundCategories.add(product.getPrimaryCategory());
						}									
						
						fileWriter.write("\t");
						
						// KEYWORDS			
						fileWriter.write("\t");
						
						// REPLACEMENTSKU
						fileWriter.write("\t");
						
						// INSTOCK			
						fileWriter.write("\t");
						
						// VIRTUALPARENTCODE								
						fileWriter.write("\t");
						
						// CATEGORYPATHJSON
						fileWriter.write("\t");
						
						//ISCATEGORY
						fileWriter.write("N");
						fileWriter.write("\t");
						
						// MEMBERS			
						var bundledProducts : Collection = product.getBundledProducts();
						for (var i : Number = 0; i < bundledProducts.size(); i++) {
							var subProduct : Product = bundledProducts[i];
							fileWriter.write(subProduct.getID());
							
							if (i+1 < bundledProducts.size()) {
								fileWriter.write(",");
							}	
						}
						fileWriter.write("\n");														
					}
				} finally {
					if (products != null) {
						products.close();
					}
				}			
					
				var categoryQueue : ArrayList = new ArrayList(foundCategories);
				
				// Loop through the categories and export them
				while (categoryQueue.size() > 0)
				{
					var category : Category = categoryQueue.removeAt(0);			
					// SKU
					fileWriter.write(replaceNull(category.getID(), ""));
					fileWriter.write("\t");
					
					// IMAGEURL					
					var image : MediaFile = category.getImage();
					/*if (image == null){
						image = category.getImage("medium");
					}
					if (image == null){
						image = category.getImage("small");
					}
					if (image == null){
						image = category.getImage("swatch");	
					}*/
					
					if (image != null) {
						fileWriter.write(replaceNull(image.getAbsURL().toString(), ""));
					}			
					fileWriter.write("\t");
					
					// TITLE
					fileWriter.write(replaceNull(category.getDisplayName(), ""));			
					fileWriter.write("\t");
					
					// PRICE
					fileWriter.write("\t");
					
					// CURRENCY
					fileWriter.write("\t");
					
					// ACTIVE
					fileWriter.write("Y");
					fileWriter.write("\t");
					
					// ITEMURL
					fileWriter.write(dw.web.URLUtils.http('Search-Show', 'cgid', category.getID()).toString());			
					fileWriter.write("\t");
					
					// CATEGORY
					var parentCategory : Category = category.getParent();			
					if(parentCategory != null){
						fileWriter.write(parentCategory.getID());
						if (!foundCategories.contains(parentCategory)) {
							// Make sure all of the parent categories are added to the feed
							categoryQueue.add(parentCategory);
							foundCategories.add(parentCategory);	
						}	
					}						
					fileWriter.write("\t");
					
					// KEYWORDS			
					fileWriter.write("\t");
					
					// REPLACEMENTSKU
					fileWriter.write("\t");
					
					// INSTOCK			
					fileWriter.write("\t");
					
					// VIRTUALPARENTCODE								
					fileWriter.write("\t");
					
					// CATEGORYPATHJSON
					fileWriter.write("\t");
					
					// ISCATEGORY
					fileWriter.write("Y");
					fileWriter.write("\t");	
					
					// MEMBERS								
					fileWriter.write("\n");		
				}
				
				fileWriter.close();	
				
				Logger.debug("About to push file to " + turntoUrl + '/feedUpload/postfile');
				
				// Push the new file to turnto.com			
				var file : HTTPRequestPart = new HTTPRequestPart('file', catalogExport);		
				var siteKeyPart : HTTPRequestPart = new HTTPRequestPart('siteKey', siteKey);
				var authKeyPart : HTTPRequestPart = new HTTPRequestPart('authKey', authKey);		
				var feedStylePart : HTTPRequestPart = new HTTPRequestPart('feedStyle', 'tab-style.1');
										
				var httpClient : HTTPClient = new HTTPClient();
				var message : String;
				httpClient.setTimeout(timeoutMs);
				httpClient.open('POST', turntoUrl + '/feedUpload/postfile');
				httpClient.sendMultiPart([siteKeyPart, authKeyPart, feedStylePart, file]);							
						
				if (httpClient.statusCode != 200) {
					// error
					Logger.debug("FAILED wrote file to " + turntoUrl + '/feedUpload/postfile');
					Logger.error("Failed to POST the catalog feed to turnto.com");
				} else {
					Logger.debug("Successfull wrote file to " + turntoUrl + '/feedUpload/postfile');
				}							
		    } catch(exception) {    	
		    	//Logger.error(exception.getMessage());
		    	trace("An exception occurred while attempting to export the catalog.");
		    	throw exception;
				//return PIPELET_ERROR;		    
		    } finally {
		    	if (fileWriter != null) {
		    		fileWriter.close();
		    	}
		    }	
	   	}
   	} finally {
   		if (objects != null) {
   			objects.close();
   		}
   	}

   return PIPELET_NEXT;
}

/**
 * Replaces null with the specified replacement string.
 * 
 * @param {String} The string to replace if null
 * @param {String} The string to use as a replacement
 *
 * @returns String - replace if str is null, otherwise str
 */
function replaceNull(str, replace){
	return (str != null) ? str : replace;	
}
